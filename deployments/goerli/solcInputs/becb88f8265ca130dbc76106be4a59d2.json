{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./PriceConverter.sol\";\n\nerror notOwner();\nerror insufficientFunds();\n\ncontract FundMe {\n\n    // msg.sender not available outside the function\n\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50*1e18; // constant saves gas\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    // constructor initializes the owner of the contract\n    constructor (address priceFeedAddress) {\n        i_owner = msg.sender; // like req.session.user = user authenticaton\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund () public payable fundController {\n\n        //require(msg.value.getConversionRate() >= MINIMUM_USD, \"Didn' send enough!\");\n        // require(getConversionRate(msg.value) >= minimumUSD, \"Didn't send enough!\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n        // 18 decimals in Wei\n    }\n\n    function withdraw() public onlyOwner {\n        // for loop\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the array\n        funders = new address[](0);\n        // actually withdraw the funds\n\n        //transfer\n        // msg.sender = address\n        // payable(msg.sender) = payable address --> you can only send eth with payable addresses\n        //payable(msg.sender).transfer(address(this).balance); // this keyword means this contract\n        \n        //send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess, \"Send failed.\");\n        \n        //call (The most optimal way)\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed.\");\n\n    }\n\n    modifier onlyOwner {\n        //require(msg.sender == i_owner, \"Authentication error: Sender is not the owner.\");\n        if (msg.sender != i_owner) {\n            revert notOwner();\n        }\n        _;\n    }\n\n    modifier fundController {\n        if (msg.value.getConversionRate(priceFeed) < MINIMUM_USD) {\n            revert insufficientFunds();\n        }\n        _;\n    }\n\n    // What happens if someone sends this contract ETH without using fund function\n\n    receive() external payable {\n        fund();\n    }\n    \n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n         \n        (, int256 price,,,) = priceFeed.latestRoundData();\n        // ETH in terms of USD\n        // returns 8 decimals: 3000.00000000\n        return uint256(price * 1e10); // returns 18 decimals\n\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n\n        return (ethAmount * ethPrice) / 1e18;\n    } \n\n    function getBTC_ETH(uint256 btcAmount) internal view returns (uint256) {\n\n        AggregatorV3Interface BTC_ETH = AggregatorV3Interface(0x779877A7B0D9E8603169DdbD7836e478b4624789);\n\n        (,int256 price,,,) = BTC_ETH.latestRoundData();\n\n        return (uint256(price) * btcAmount) / 1e8;\n    }\n\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}